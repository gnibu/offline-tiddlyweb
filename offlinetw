#!/usr/bin/env python2.7

# -*- coding: utf8 -*-

import os
import re
import time
import ConfigParser
import requests
import json
import hashlib
import urllib
import os.path

###################
# Utility functions
###################


def modifiedFiles(dir, date):
    """Find files modified after the given date in the given dir."""
    changedFiles = []
    for fname in os.listdir(dir):
        if fname.endswith(''):
            modtime = int(time.strftime('%Y%m%d%H%M%S',
                                        time.localtime
                                        (
                                            os.stat(os.path.join(dir, fname))
                                            .st_mtime
                                        )))
            if modtime > date:
                changedFiles.append(fname)
        else:
            pass
    return changedFiles


def encodeURL(url, name):
    """Return the URL of the tiddle having the given name"""
    return url+"/tiddlers/"+urllib.quote(name)


def createFolder(dir):
    """Creates a folder if it doesn't exist"""
    if not os.path.exists(dir):
        print "mkdir " + dir
        os.makedirs(dir)


class otwRepository:
    """Class to access a distant tiddlywiki repository and synchronize
    single or multiple tiddlers both ways"""

    def __init__(self, config, name):
        self.config = config
        self.name = name
        try:
            self.lastModification = config.getint(self.name,
                                                  'lastModification')
        except:
            self.lastModification = 0
        self.localFolder = re.sub(r'(~)', os.getenv("HOME"),
                                  config.get(self.name, "localFolder"))
        self.repoMetadataFolder = os.path.join(metadataFolder, self.name)
        createFolder(self.localFolder)
        createFolder(self.repoMetadataFolder)
        os.chdir(self.localFolder)
        self.url = config.get(self.name, 'url')
        self.testMode = config.get(self.name, 'testMode')
        authentication = config.getboolean(self.name, "authentication")
        self.user = ""
        self.password = ""

        if authentication:
            self.user = config.get(self.name, "user")
            passwordFile = re.sub(r'(~)', os.getenv("HOME"),
                                  config.get(self.name, "passwordFile"))
            f = open(passwordFile, "r")
            self.password = f.read().strip()
            f.close()
        print "===== Syncing " + self.name + " to " + self.localFolder

    def getName(self):
        return self.name

    def writeMetadata(self, tiddler):
        """Calculate text sha1 and store metadata"""
        tiddler["sha1"] = hashlib.sha1(tiddler["text"]
                                       .encode('utf8')).hexdigest()
        f = open(os.path.join(self.repoMetadataFolder, tiddler["title"]), 'w')
        f.write(json.dumps(tiddler))
        f.close

    def getTiddlerByName(self, title):
        print "Downloading "+title
        tiddlerURL = encodeURL(self.url, title)+".json"
        r = requests.get(tiddlerURL, auth=(self.user, self.password))
        try:
            tiddler = json.loads(r.content)
        except:
            print r.content
            exit(1)
        tiddler["text"] += "\n"
        tiddler["sha1"] = 0

        # check metadata
        metadataFile = os.path.join(self.repoMetadataFolder, title)
        if os.path.isfile(metadataFile):
            f = open(metadataFile, "r")
            tid = json.loads(f.read())
            tiddler["sha1"] = tid["sha1"]
            f.close()

        # change the file on disk only if the content has changed
        if hashlib.sha1(tiddler["text"]
                  .encode('utf8')).hexdigest() != tiddler["sha1"]:
            f = open(title+".txt", 'w')
            f.write(tiddler["text"].encode('utf8'))
            f.close()
        self.writeMetadata(tiddler)

        # get the date of the lastest tiddler
        if tiddler["modified"] > self.lastModification:
            self.lastModification = tiddler["modified"]
            self.config.set(self.name, 'lastModification',
                            self.lastModification)

    def getModifiedTiddlers(self):
        print "lastest tiddler modification date = ", self.lastModification
        r = requests.get(self.url + "/tiddlers.json?select=modified:>"
                         + str(self.lastModification),
                         auth=(self.user, self.password))
        tiddlers = json.loads(r.content)
        print len(tiddlers), " tiddler(s) to download"
        for tiddler in tiddlers:
            title = tiddler["title"]
            self.getTiddlerByName(title)

    def putTiddler(self, tiddler):
        headers = {'content-type': 'application/json'}
        title = tiddler["title"]
        data = json.dumps({'text': tiddler['text'],
                          'tags': tiddler['tags']})
        print "Uploading " + encodeURL(self.url,  tiddler['title'])
        r = requests.put(encodeURL(self.url, title), data,
                         auth=(self.user, self.password), headers=headers)
        self.writeMetadata(tiddler)
        print r.content

    def putModifiedTiddlers(self):
        """Rush modified files on the server. Returns True if something has
           been pushed"""
        try:
            lastRun = config.getint("general", "lastRun")
        except:
            lastRun = 0

        if not fastMode:
            lastRun = 0
        updatedFiles = modifiedFiles(self.localFolder, lastRun)
        updatedTiddlers = []
        print len(updatedFiles), " file(s) have been modified on disk"
        for file in updatedFiles:
            title = re.sub(r'(.txt$)', '', file)
            tiddler = None
            try:
                f = open(os.path.join(self.repoMetadataFolder, title), "r")
                tiddler = json.loads(f.read())
                f.close()
            except:
                print "SKIP ", title, ": can't read metadata"
                continue
            f = open(title+".txt")
            filecontent = f.read()
            f.close()
            # Upload only only if the actual content of the file has changed
            if hashlib.sha1(filecontent).hexdigest() != tiddler["sha1"]:
                if not self.testMode or (title == "test") \
                   or (title == "sigfox") or (title == "test2"):
                    tiddler['text'] = filecontent
                    tiddler['title'] = title
                    updatedTiddlers.append(tiddler)
        print len(updatedTiddlers), " tiddler(s) have real changes on disk"
        for tiddler in updatedTiddlers:
            self.putTiddler(tiddler)
        if len(updatedTiddlers) > 0:
            return True
        else:
            return False


config_file = os.path.join(os.getenv("HOME"), '.offlinetw.rc')
config = ConfigParser.ConfigParser()
try:
    config.read(config_file)
    repositories = config.get("general", "repositories").split(",")
except:
    print "Config file " + config_file + \
          " not found or invalid. Please use the sanple config file."
    exit(1)  # TODO backtrace

metadataFolder = re.sub(r'(~)', os.getenv('HOME'),
                        config.get('general', 'metadataFolder'))

createFolder(metadataFolder)

# default to non fast mode because my iphone dropbox client doesn't change
# the timestamps
fastMode = False

now = int(time.strftime('%Y%m%d%H%M%S', time.localtime()))

for repoName in repositories:
    repo = otwRepository(config, repoName)
    # Do not get tiddlers while edition is in place
    if repo.putModifiedTiddlers() is False:
        repo.getModifiedTiddlers()
    else:
        time.sleep(10)

config.set("general", "lastRun", now)

with open(config_file, 'wb') as configfile:
    config.write(configfile)
