#!/usr/bin/env python2.7

# -*- coding: utf8 -*-

import os
import re
import time
import ConfigParser
import requests
import json
import hashlib


def modifiedFiles(dir, date):
    """Find files modified after the given date in the given dir."""
    for fname in os.listdir(dir):
        if fname.endswith(''):
            modtime = os.stat(os.path.join(dir, fname)).st_mtime
        if modtime > date:
            print fname, "has changed."
        else:
            pass


def encodeURL(url, name):
    """Return the URL of the tiddle having the given name"""
    return url+"/tiddlers/"+re.sub(r'( )', r'%20', name)


def getTiddlers(repo):

    try:
        lastModification = config.getint(repo, 'lastModification')
    except:
        lastModification = 0

    print "lastest tiddler modification date = ", lastModification

    r = requests.get(url + "/tiddlers.json?select=modified:>"
                     + str(lastModification),
                     auth=(user, password))
    tiddlers = json.loads(r.content)

    print len(tiddlers), " tiddlers to download"

    for tiddler in tiddlers:
        title = tiddler["title"]
        print "Downloading "+title
        tiddlerURL = encodeURL(url, title)+".json"
        r = requests.get(tiddlerURL, auth=(user, password))
        content = json.loads(r.content)
        f = open(title+".txt", 'w')
        f.write(content["text"].encode('utf8'))
        f.close()
        tiddler["sha1"] = hashlib.sha1(content["text"]
                                 .encode('utf8')).hexdigest()
        # get the date of the lastest tiddler
        if tiddler["modified"] > lastModification:
            lastModification = tiddler["modified"]
            config.set(repo, 'lastModification', lastModification)
        f = open(repoMetadataFolder + "/" + title, 'w')
        f.write(json.dumps(tiddler))
        f.close
    # Writing our configuration file
    with open(config_file, 'wb') as configfile:
        config.write(configfile)


def testMkdirFolder(dir):
    if not os.path.exists(dir):
        print "mkdir " + dir
        os.makedirs(dir)


def putTiddlers(repo):
    title = "test"
    headers = {'content-type': 'application/json'}
    f = open(title+".txt")
    filecontent = f.read()
    f.close()
    f = open(repoMetadataFolder + "/" + title, "r")
    metadata = json.loads(f.read())
    print "Current file sha1 = " + hashlib.sha1(filecontent).hexdigest()
    print "Previous file sha1 = " + metadata["sha1"]
    if hashlib.sha1(filecontent).hexdigest() != metadata["sha1"]:
        data = json.dumps({'text': filecontent})
        print "Uploading " + encodeURL(url, title)
        r = requests.put(encodeURL(url, title), data,
                         auth=(user, password), headers=headers)
        print r.text

config_file = os.getenv("HOME")+'/.offlinetw.rc'
config = ConfigParser.ConfigParser()
try:
    config.read(config_file)
    repositories = config.get("general", "repositories").split(",")
except:
    print "Config file " + config_file + \
          " not found or invalid. Please use the sanple config file."
    exit(1)  # TODO backtrace

metadataFolder = re.sub(r'(~)', os.getenv("HOME"),
                        config.get("general", "metadataFolder"))

testMkdirFolder(metadataFolder)

for repo in repositories:
    now = int(time.strftime('%Y%m%d%M%S', time.localtime()))
    url = config.get(repo, 'url')
    localFolder = re.sub(r'(~)', os.getenv("HOME"),
                         config.get(repo, "localFolder"))
    #localFolder = config.get(repo,"localFolder")
    lastModification = 0
    authentication = config.getboolean(repo, "authentication")
    user = ""
    password = ""
    repoMetadataFolder = metadataFolder + "/" + repo

    print "===== Syncing " + repo + " to " + localFolder

    testMkdirFolder(localFolder)
    testMkdirFolder(repoMetadataFolder)

    os.chdir(localFolder)

    if authentication:
        user = config.get(repo, "user")
        passwordFile = re.sub(r'(~)', os.getenv("HOME"),
                              config.get(repo, "passwordFile"))
        f = open(passwordFile, "r")
        password = f.read().strip()
        f.close()
    putTiddlers(repo)
    getTiddlers(repo)
