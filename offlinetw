#!/usr/bin/env python2.7

# -*- coding: utf8 -*-

import os
import re
import time
import ConfigParser
import requests
import json
import hashlib
import urllib


def modifiedFiles(dir, date):
    """Find files modified after the given date in the given dir."""
    changedFiles = []
    for fname in os.listdir(dir):
        if fname.endswith(''):
            modtime = int(time.strftime('%Y%m%d%H%M%S',
                                        time.localtime
                                        (
                                            os.stat(os.path.join(dir, fname))
                                            .st_mtime
                                        )))
            if modtime > date:
                changedFiles.append(fname)
        else:
            pass
    return changedFiles


def encodeURL(url, name):
    """Return the URL of the tiddle having the given name"""
    return url+"/tiddlers/"+urllib.quote(name)


class otwRepository:

    def __init__(self, config, name):
        print "Constructor"
        self.config = config
        self.name = name

    def getName(self):
        return self.name


def getTiddlers(repo):

    try:
        lastModification = config.getint(repo, 'lastModification')
    except:
        lastModification = 0

    print "lastest tiddler modification date = ", lastModification

    r = requests.get(url + "/tiddlers.json?select=modified:>"
                     + str(lastModification),
                     auth=(user, password))
    tiddlers = json.loads(r.content)

    print len(tiddlers), " tiddler(s) to download"

    for tiddler in tiddlers:
        title = tiddler["title"]
        print "Downloading "+title
        tiddlerURL = encodeURL(url, title)+".json"
        r = requests.get(tiddlerURL, auth=(user, password))
        try:
            content = json.loads(r.content)
        except:
            print r.content
            exit(1)
        f = open(title+".txt", 'w')
        f.write(content["text"].encode('utf8'))
        f.close()
        tiddler["sha1"] = hashlib.sha1(content["text"]
                                 .encode('utf8')).hexdigest()
        # get the date of the lastest tiddler
        if tiddler["modified"] > lastModification:
            lastModification = tiddler["modified"]
            config.set(repo, 'lastModification', lastModification)
        f = open(os.path.join(repoMetadataFolder, title), 'w')
        f.write(json.dumps(tiddler))
        f.close
    # Writing our configuration file


def createFolder(dir):
    """Creates a folder if it doesn't exist"""
    if not os.path.exists(dir):
        print "mkdir " + dir
        os.makedirs(dir)


def putTiddlers(repo):
    try:
        lastRun = config.getint("general", "lastRun")
    except:
        lastRun = 0

    if not fastMode:
        lastRun = 0

    updatedFiles = modifiedFiles(localFolder, lastRun)
    updatedTiddlers = []
    headers = {'content-type': 'application/json'}

    print len(updatedFiles), " file(s) have been modified on disk"

    for file in updatedFiles:
        title = re.sub(r'(.txt$)', '', file)
        tiddler = None
        try:
            f = open(os.path.join(repoMetadataFolder, title), "r")
            tiddler = json.loads(f.read())
            f.close()
        except:
            print "SKIP ", title, ": can't read metadata"
            continue
        f = open(title+".txt")
        filecontent = f.read()
        f.close()
        # Upload only only if the actual content of the file has changed
        if hashlib.sha1(filecontent).hexdigest() != tiddler["sha1"]:
            if not testMode or (title == "test") or (title == "test2"):
                tiddler['text'] = filecontent
                updatedTiddlers.append(tiddler)

    print len(updatedTiddlers), " tiddler(s) have real changes on disk"

    for tiddle in updatedTiddlers:
        title = tiddle["title"]
        data = json.dumps({'text': tiddle['text'],
                           'tags': tiddle['tags']})
        print "Uploading " + encodeURL(url, title)
        r = requests.put(encodeURL(url, title), data,
                         auth=(user, password), headers=headers)
        print r.content

config_file = os.path.join(os.getenv("HOME"), '.offlinetw.rc')
config = ConfigParser.ConfigParser()
try:
    config.read(config_file)
    repositories = config.get("general", "repositories").split(",")
except:
    print "Config file " + config_file + \
          " not found or invalid. Please use the sanple config file."
    exit(1)  # TODO backtrace

metadataFolder = re.sub(r'(~)', os.getenv('HOME'),
                        config.get('general', 'metadataFolder'))

createFolder(metadataFolder)

# default to non fast mode because my iphone dropbox client doesn't change
# the timestamps
fastMode = False

now = int(time.strftime('%Y%m%d%H%M%S', time.localtime()))

for repo in repositories:
    repos = otwRepository(config, repo)
    print repos.getName()
    url = config.get(repo, 'url')
    testMode = config.get(repo, 'testMode')
    localFolder = re.sub(r'(~)', os.getenv("HOME"),
                         config.get(repo, "localFolder"))
    lastModification = 0
    authentication = config.getboolean(repo, "authentication")
    user = ""
    password = ""
    repoMetadataFolder = os.path.join(metadataFolder, repo)

    print "===== Syncing " + repo + " to " + localFolder

    createFolder(localFolder)
    createFolder(repoMetadataFolder)

    os.chdir(localFolder)

    if authentication:
        user = config.get(repo, "user")
        passwordFile = re.sub(r'(~)', os.getenv("HOME"),
                              config.get(repo, "passwordFile"))
        f = open(passwordFile, "r")
        password = f.read().strip()
        f.close()
    putTiddlers(repo)
    getTiddlers(repo)

config.set("general", "lastRun", now)

with open(config_file, 'wb') as configfile:
    config.write(configfile)
